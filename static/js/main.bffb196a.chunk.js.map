{"version":3,"sources":["components/Nav.jsx","components/Table.jsx","components/TableControls.jsx","components/Pagination.jsx","components/CreateClusterForm.jsx","App.js","index.js"],"names":["Nav","className","id","Table","clusters","firstCluster","lastCluster","sortedClusters","useState","field","direction","sortParams","setSortParams","sort","a","b","toggleSort","sortIcon","name","undefined","clearSort","onClick","type","e","slice","map","os","cores","pods","nodes","total_memory","total_memory_gb","labels","namespaces","replace","length","toLocaleString","join","TableControls","totalClustersCount","filteredClustersCount","searchTerm","setSearchTerm","clearSearchTerm","toggleClusterForm","clusterCountHeading","placeholder","value","onChange","disabled","Pagination","setCurrentClusterPage","currentClusterPage","totalClusters","changeClusterPage","CreateClusterForm","addNewCluster","clusterFields","setClusterFields","handleChange","target","newNameSpaces","split","onSubmit","preventDefault","handleSubmit","style","width","required","min","max","App","useEffect","localStClusters","localStorage","getItem","fetch","headers","Accept","then","res","json","data","setClusters","JSON","parse","setItem","stringify","getClusters","clustersPerPage","searchClusters","term","toLowerCase","filter","cluster","includes","showCreateClusterForm","setShowCreateClusterForm","filteredClusters","newCluster","newClusterList","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bffb196a.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles.css';\n\nconst Nav = () => {\n\treturn (\n\t\t<div className='navbar'>\n\t\t\t<div>\n\t\t\t\t<span id='logo'>vm</span>Tanzu Mission Control\n\t\t\t</div>\n\t\t\t<div>UserName | Org</div>\n\t\t</div>\n\t);\n};\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport '../styles.css';\n\nconst Table = ({ clusters, firstCluster, lastCluster }) => {\n\tlet sortedClusters = [...clusters];\n\n\t//Sorting parameters\n\tconst [sortParams, setSortParams] = useState({\n\t\tfield: null,\n\t\tdirection: null,\n\t});\n\n\t//destructure sorting params\n\tconst { field, direction } = sortParams;\n\n\t//sort setup - look for a sort field and direction, then sort array accordingly\n\tif (field !== null) {\n\t\tsortedClusters.sort((a, b) => {\n\t\t\tif (a[field] < b[field]) {\n\t\t\t\treturn direction === 'ascending' ? -1 : 1;\n\t\t\t}\n\t\t\tif (a[field] > b[field]) {\n\t\t\t\treturn direction === 'ascending' ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\t// Toggle Sort\n\tconst toggleSort = (field) => {\n\t\tlet direction = 'ascending';\n\t\tif (sortParams.field === field && sortParams.direction === 'ascending') {\n\t\t\tdirection = 'descending';\n\t\t}\n\t\tsetSortParams({ field, direction });\n\t};\n\n\t//Display icon based on default, ascending, or descending selection\n\tconst sortIcon = (name) => {\n\t\tif (name !== sortParams.field) {\n\t\t\treturn <i className='fas fa-sort'></i>;\n\t\t}\n\t\treturn sortParams.field === name && sortParams.direction === 'ascending' ? (\n\t\t\t<i className='fas fa-sort-up'></i>\n\t\t) : sortParams.field === name && sortParams.direction === 'descending' ? (\n\t\t\t<i className='fas fa-sort-down'></i>\n\t\t) : undefined;\n\t};\n\n\t//Clear sort from array and reset\n\tconst clearSort = () => {\n\t\tsetSortParams({ field: null, direction: null });\n\t};\n\n\treturn (\n\t\t<table className='table-wrapper'>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<span onClick={() => clearSort()}>Cluster Name</span>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='sort-icon'\n\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\ttoggleSort('name');\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{sortIcon('name')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<span onClick={() => clearSort()}>OS</span>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='sort-icon'\n\t\t\t\t\t\t\tonClick={() => toggleSort('os')}>\n\t\t\t\t\t\t\t{sortIcon('os')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<span onClick={() => clearSort()}>Cores</span>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='sort-icon'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\ttoggleSort('cores');\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{sortIcon('cores')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th>Pods</th>\n\t\t\t\t\t<th>Nodes</th>\n\t\t\t\t\t<th>Memory</th>\n\t\t\t\t\t<th>Labels</th>\n\t\t\t\t\t<th>Namespaces</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{sortedClusters\n\t\t\t\t\t.slice(firstCluster, lastCluster)\n\t\t\t\t\t.map(\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tos,\n\t\t\t\t\t\t\tcores,\n\t\t\t\t\t\t\tpods,\n\t\t\t\t\t\t\tnodes,\n\t\t\t\t\t\t\ttotal_memory_gb: total_memory,\n\t\t\t\t\t\t\tlabels,\n\t\t\t\t\t\t\tnamespaces,\n\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t<tr key={name}>\n\t\t\t\t\t\t\t\t<td className='cluster-name'>{name.replace('-cluster', '')}</td>\n\t\t\t\t\t\t\t\t{os.length > 0 && <td>{os}</td>}\n\t\t\t\t\t\t\t\t<td>{cores}</td>\n\t\t\t\t\t\t\t\t<td>{pods}</td>\n\t\t\t\t\t\t\t\t<td>{nodes}</td>\n\t\t\t\t\t\t\t\t<td>{total_memory.toLocaleString('en')}%</td>\n\t\t\t\t\t\t\t\t<td className='list-col'>\n\t\t\t\t\t\t\t\t\t<span className='btn-labels'>{labels.length}</span>{' '}\n\t\t\t\t\t\t\t\t\t{labels.join(', ')}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className='list-col namespaces'>{namespaces.join(',')}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t),\n\t\t\t\t\t)}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n};\n\nexport default Table;\n","import React from 'react';\nimport '../styles.css';\n\nconst TableControls = ({\n\ttotalClustersCount,\n\tfilteredClustersCount,\n\tsearchTerm,\n\tsetSearchTerm,\n\tclearSearchTerm,\n\ttoggleClusterForm,\n}) => {\n\tconst clusterCountHeading =\n\t\tfilteredClustersCount === totalClustersCount\n\t\t\t? `${totalClustersCount} Total Clusters`\n\t\t\t: `${filteredClustersCount} of ${totalClustersCount} Clusters`;\n\n\treturn (\n\t\t<div className='cluster-cntrl-wrapper'>\n\t\t\t<div className='cluster-cntrl-group'>\n\t\t\t\t<div className='cluster-cntrl-header'>\n\t\t\t\t\t<h1>Clusters</h1>\n\t\t\t\t\t<div id='cluster-count'>{clusterCountHeading}</div>\n\t\t\t\t</div>\n\t\t\t\t<button className='btn-primary' onClick={() => toggleClusterForm(true)}>\n\t\t\t\t\tNew Cluster\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tclassName='search-input'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Search by name or OS'\n\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\tonChange={setSearchTerm}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName='btn-secondary'\n\t\t\t\t\tonClick={clearSearchTerm}\n\t\t\t\t\t//disable search unless user enters term (otherwise click resets currentClustersPage to 1)\n\t\t\t\t\tdisabled={searchTerm === ''}>\n\t\t\t\t\tClear search\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TableControls;\n","import React from 'react';\nimport '../styles.css';\n\nconst Pagination = ({\n\tsetCurrentClusterPage,\n\tcurrentClusterPage,\n\tlastCluster,\n\tfirstCluster,\n\ttotalClusters,\n}) => {\n\tconst changeClusterPage = (direction) => {\n\t\tdirection === 'back'\n\t\t\t? setCurrentClusterPage(currentClusterPage - 1)\n\t\t\t: setCurrentClusterPage(currentClusterPage + 1);\n\t};\n\n\treturn (\n\t\t<div className='pagination-wrapper'>\n\t\t\t<div className='pagination-controls'>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={currentClusterPage === 1}\n\t\t\t\t\tclassName='btn-pagination'\n\t\t\t\t\tonClick={() => changeClusterPage('back')}>\n\t\t\t\t\t<i className='fas fa-chevron-left' />\n\t\t\t\t</button>\n\n\t\t\t\t<span className='pagination-title'>\n\t\t\t\t\t{firstCluster + 1} to {lastCluster} of {totalClusters} Clusters\n\t\t\t\t</span>\n\n\t\t\t\t<button\n\t\t\t\t\tdisabled={lastCluster >= totalClusters}\n\t\t\t\t\tclassName='btn-pagination'\n\t\t\t\t\tonClick={() => changeClusterPage('fwd')}>\n\t\t\t\t\t<i className='fas fa-chevron-right' />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Pagination;\n","import React, { useState } from 'react';\nimport '../styles.css';\n\nconst CreateClusterForm = ({ toggleClusterForm, addNewCluster }) => {\n\tconst [clusterFields, setClusterFields] = useState({\n\t\tname: '',\n\t\tos: '',\n\t\tcores: '',\n\t\tpods: '',\n\t\tnodes: '',\n\t\ttotal_memory_gb: '',\n\t\tlabels: [],\n\t\tnamespaces: [],\n\t});\n\n\tconst {\n\t\tname,\n\t\tos,\n\t\tcores,\n\t\tpods,\n\t\t// total_memory_gb: total_memory,\n\t\tlabels,\n\t\tnamespaces,\n\t} = clusterFields;\n\n\tconst handleSubmit = (e, clusterFields) => {\n\t\te.preventDefault();\n\t\taddNewCluster(clusterFields);\n\t\ttoggleClusterForm(false);\n\t};\n\n\tconst handleChange = (e) => {\n\t\tif (e.target.name === 'namespaces' || e.target.name === 'labels') {\n\t\t\tlet newNameSpaces = e.target.value.split(',');\n\t\t\tsetClusterFields({\n\t\t\t\t...clusterFields,\n\t\t\t\t[e.target.name]: newNameSpaces,\n\t\t\t});\n\t\t}\n\t\t// if (e.target.name === 'labels') {\n\t\t// \tconsole.log(e.target.value);\n\t\t// \tlet newLabels = Array.from(e.target.value, (value) => value);\n\t\t// \tsetClusterFields({\n\t\t// \t\t...clusterFields,\n\t\t// \t\t[e.target.name]: e.target.value,\n\t\t// \t});\n\t\t// \tconsole.log(clusterFields);\n\t\telse {\n\t\t\tsetClusterFields({ ...clusterFields, [e.target.name]: e.target.value });\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='form-wrapper'>\n\t\t\t<form\n\t\t\t\tclassName='new-cluster-form'\n\t\t\t\tonSubmit={(e) => handleSubmit(e, clusterFields)}>\n\t\t\t\t<div className='form-header'>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<h2>Add New Cluster</h2>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn-secondary '\n\t\t\t\t\t\tonClick={() => toggleClusterForm(false)}>\n\t\t\t\t\t\tclose\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<hr style={{ width: '100%' }}></hr>\n\t\t\t\t<div className='form-input-wrapper'>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tName\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tOS\n\t\t\t\t\t\t<select name='os' value={os} onChange={handleChange}>\n\t\t\t\t\t\t\t<option value=''></option>\n\t\t\t\t\t\t\t<option value='fedora'>fedora</option>\n\t\t\t\t\t\t\t<option value='suse'>suse</option>\n\t\t\t\t\t\t\t<option value='ubuntu'>ubuntu</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</label>\n\t\t\t\t\t{/* <label>\n\t\t\t\t\t\tLabels\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname='labels'\n\t\t\t\t\t\t\tmultiple={true}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tvalue={labels}>\n\t\t\t\t\t\t\t<option value='zen'>Zen</option>\n\t\t\t\t\t\t\t<option value='ana'>Ana</option>\n\t\t\t\t\t\t\t<option value='junk'>Junk</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</label> */}\n\t\t\t\t\t<label>\n\t\t\t\t\t\tLabels\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname='labels'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tvalue={labels}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tCores\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname='cores'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='10'\n\t\t\t\t\t\t\tvalue={cores}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tPods\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname='pods'\n\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='10'\n\t\t\t\t\t\t\tvalue={pods}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tNamespaces\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname='namespaces'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tvalue={namespaces}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<input\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tvalue='Create New Cluster'\n\t\t\t\t\tclassName='btn-primary'\n\t\t\t\t\tid='btn-form-submit'\n\t\t\t\t/>{' '}\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default CreateClusterForm;\n","import React, { useEffect, useState } from 'react';\nimport './styles.css';\n\n//import children\nimport Nav from './components/Nav';\nimport Table from './components/Table';\nimport TableControls from './components/TableControls';\nimport Pagination from './components/Pagination';\nimport CreateClusterForm from './components/CreateClusterForm';\n\nexport const App = () => {\n\t//Fetch clusters on mount\n\t//If clusters are in local storage, use those\n\t//Local storage used for updated array, including newly created cluster records\n\tuseEffect(() => {\n\t\tconst getClusters = () => {\n\t\t\tconst localStClusters = localStorage.getItem('clusters');\n\t\t\tfetch('clusters.json', {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\treturn res.json();\n\t\t\t\t})\n\t\t\t\t.then((data) => {\n\t\t\t\t\tif (localStClusters) {\n\t\t\t\t\t\tsetClusters(JSON.parse(localStorage.getItem('clusters')));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlocalStorage.setItem('clusters', JSON.stringify(data));\n\t\t\t\t\t\tsetClusters(data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n\t\tgetClusters();\n\t}, []);\n\n\t//Cluster state management\n\tconst [clusters, setClusters] = useState([]);\n\n\t//Cluster pagination/inventory management\n\tconst [currentClusterPage, setCurrentClusterPage] = useState(1);\n\tconst [clustersPerPage] = useState(10); //instructions say no more than 25 at a time\n\n\t//Pagination Helpers\n\tconst lastCluster = currentClusterPage * clustersPerPage;\n\tconst firstCluster = lastCluster - clustersPerPage;\n\n\t//Search state management\n\tconst [searchTerm, setSearchTerm] = useState('');\n\n\tconst searchClusters = (clusters) => {\n\t\tconst term = searchTerm.toLowerCase();\n\n\t\treturn clusters.filter(\n\t\t\t(cluster) =>\n\t\t\t\tcluster.name.toLowerCase().includes(term) ||\n\t\t\t\tcluster.os.toLowerCase().includes(term),\n\t\t\t//include search within label and namespace arrays\n\t\t);\n\t};\n\n\t//Create New Cluster\n\t//toggle create new cluster form\n\tconst [showCreateClusterForm, setShowCreateClusterForm] = useState(false);\n\tconst addNewCluster = (newCluster) => {\n\t\tlet newClusterList = clusters.concat(newCluster);\n\t\tsetClusters(clusters.concat(newCluster));\n\t\tlocalStorage.setItem('clusters', JSON.stringify(newClusterList));\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Nav />\n\t\t\t<div className='page-wrapper'>\n\t\t\t\t<TableControls\n\t\t\t\t\ttotalClustersCount={clusters.length}\n\t\t\t\t\tfilteredClustersCount={searchClusters(clusters).length}\n\t\t\t\t\tsearchTerm={searchTerm}\n\t\t\t\t\tsetSearchTerm={(e) => {\n\t\t\t\t\t\tsetSearchTerm(e.target.value);\n\t\t\t\t\t\tsetCurrentClusterPage(1);\n\t\t\t\t\t}}\n\t\t\t\t\tclearSearchTerm={() => {\n\t\t\t\t\t\tsetSearchTerm('');\n\t\t\t\t\t\tsetCurrentClusterPage(1);\n\t\t\t\t\t}}\n\t\t\t\t\ttoggleClusterForm={setShowCreateClusterForm}\n\t\t\t\t/>\n\t\t\t\t<Table\n\t\t\t\t\tclusters={searchClusters(clusters)}\n\t\t\t\t\tfirstCluster={firstCluster}\n\t\t\t\t\tlastCluster={lastCluster}\n\t\t\t\t/>\n\t\t\t\t<Pagination\n\t\t\t\t\tsetCurrentClusterPage={setCurrentClusterPage}\n\t\t\t\t\tcurrentClusterPage={currentClusterPage}\n\t\t\t\t\tfirstCluster={firstCluster}\n\t\t\t\t\tlastCluster={lastCluster}\n\t\t\t\t\tfilteredClusters={searchClusters(clusters)}\n\t\t\t\t\ttotalClusters={clusters.length}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{showCreateClusterForm && (\n\t\t\t\t<CreateClusterForm\n\t\t\t\t\ttoggleClusterForm={setShowCreateClusterForm}\n\t\t\t\t\taddNewCluster={addNewCluster}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}